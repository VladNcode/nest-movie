// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum LikeType {
  movie
  actor
  review
  comment
  commentResponse
}

enum CommentType {
  actor
  movie
  review
}

enum RatingType {
  actor
  movie
  review
}

model User {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  username          String            @unique
  email             String            @unique
  passwordHash      String            @map("password_hash")
  passwordChangedAt DateTime          @default(now()) @map("password_changed_at")
  bio               String
  avatar            String            @default("avatar.jpg")
  role              Role              @default(user)
  Reviews           Review[]
  Comments          Comment[]
  Like              Like[]
  Rating            Rating[]
  CommentResponse   CommentResponse[]
}

model Actor {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  tag       String   @unique @db.VarChar(255)
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  photo     String   @default("actor_photo.jpg")
  Movie     Movie[]
}

model Movie {
  id          Int      @id @default(autoincrement())
  title       String   @unique @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @map("updated_at")
  description String
  posters     String[]
  releaseDate DateTime @map("release_date")
  actors      Actor[]
  Reviews     Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  body      String   @unique @db.VarChar(1000)
  userId    Int      @map("user_id")
  movieId   Int      @map("movie_id")
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
}

model Comment {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  body             String            @unique @db.VarChar(240)
  commentType      CommentType       @map("comment_type")
  typeId           Int               @map("type_id")
  userId           Int               @map("user_id")
  User             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentResponses CommentResponse[]
}

model CommentResponse {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  body      String   @db.VarChar(240)
  commentId Int      @map("comment_id")
  userId    Int      @map("user_id")
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  likeType  LikeType @map("like_type")
  typeId    Int      @map("type_id")
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")

  @@unique([userId, likeType, typeId])
}

model Rating {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  ratingType RatingType @map("rating_type")
  typeId     Int        @map("type_id")
  score      Int        @db.SmallInt()
  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int        @map("user_id")

  @@unique([userId, ratingType, typeId])
}
