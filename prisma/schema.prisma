// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  username          String    @unique
  email             String    @unique
  passwordHash      String    @map("password_hash")
  passwordChangedAt DateTime  @default(now()) @map("password_changed_at")
  bio               String
  avatar            String
  role              Role      @default(user)
  Reviews           Review[]
  Comments          Comment[]
  Like              Like[]
}

model Actor {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  tag       String    @unique @db.VarChar(255)
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  photo     String
  Comments  Comment[]
  Like      Like[]
  Movie     Movie[]
}

model Movie {
  id          Int       @id @default(autoincrement())
  title       String    @unique @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  description String
  releaseDate DateTime  @map("release_date")
  actors      Actor[]
  Reviews     Review[]
  Comments    Comment[]
  Like        Like[]
}

model Review {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  rating    Int
  body      String    @unique @db.VarChar(1000)
  userId    Int       @unique @map("user_id")
  movieId   Int       @unique @map("movie_id")
  User      User      @relation(fields: [userId], references: [id])
  Movie     Movie     @relation(fields: [movieId], references: [id])
  Comments  Comment[]
  Like      Like[]
}

model Comment {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  rating          Int
  body            String            @unique @db.VarChar(240)
  userId          Int               @unique @map("user_id")
  actorId         Int               @unique @map("actor_id")
  movieId         Int               @unique @map("movie_id")
  reviewId        Int               @unique @map("review_id")
  User            User              @relation(fields: [userId], references: [id])
  Actor           Actor             @relation(fields: [actorId], references: [id])
  Movie           Movie             @relation(fields: [movieId], references: [id])
  Reviews         Review            @relation(fields: [reviewId], references: [id])
  Like            Like[]
  Comment4Comment Comment4Comment[]
}

model Comment4Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  body      String   @unique @db.VarChar(240)
  commentId Int      @unique @map("comment_id")
  Comment   Comment  @relation(fields: [commentId], references: [id])
  Like      Like[]
}

model Like {
  id                Int             @id @default(autoincrement())
  createdAt         DateTime        @default(now()) @map("created_at")
  userId            Int             @unique @map("user_id")
  movieId           Int             @unique @map("movie_id")
  actorId           Int             @unique @map("actor_id")
  reviewId          Int             @unique @map("review_id")
  commentId         Int             @unique @map("comment_id")
  comment4CommentId Int             @unique @map("comment4comment_id")
  User              User            @relation(fields: [userId], references: [id])
  Movie             Movie           @relation(fields: [movieId], references: [id])
  Actor             Actor           @relation(fields: [actorId], references: [id])
  Review            Review          @relation(fields: [reviewId], references: [id])
  Comment           Comment         @relation(fields: [commentId], references: [id])
  Comment4Comment   Comment4Comment @relation(fields: [comment4CommentId], references: [id])
}
